macro(build_openssl)

    include(ExternalProject)
    include(ProcessorCount)
    ProcessorCount(N)

    if (NOT N EQUAL 0)
        set(MAKE_OPS "-j${N}")
    endif ()

    set(OSSL_VERSION "1.1.1n")
    set(OSSL_HASH "40dceb51a4f6a5275bde0e6bf20ef4b91bfc32ed57c0552e2e8e15463372b17a")
    set(OSSL_URL "https://www.openssl.org/source/openssl-${OSSL_VERSION}.tar.gz")
    set(OSSL_OPTIONS no-ssl3 no-comp enable-ec_nistp_64_gcc_128 --prefix=${CMAKE_CURRENT_BINARY_DIR})

    if (APPLE)
        if (IOS)
            string(REPLACE ";" " " ARCHS "${CMAKE_OSX_ARCHITECTURES}")
            set(OSSL_CONFIGURE echo "Building OpenSSL for ${CMAKE_OSX_ARCHITECTURES}")
            set(OSSL_IOS_OPTIONS "no-ssl2 no-ssl3 no-comp")
            if (${IOS_PLATFORM} MATCHES "SIMULATOR")
                set(IS_SIMULATOR true)
            else ()
                set(IS_SIMULATOR false)
            endif ()
            set(OSSL_BUILD  export CONFIG_OPTIONS=${OSSL_IOS_OPTIONS} && SOURCEDIR=${CMAKE_CURRENT_SOURCE_DIR}/ios CONFIG_ENABLE_EC_NISTP_64_GCC_128=true IS_SIMULATOR=${IS_SIMULATOR} TARGETDIR=${CMAKE_CURRENT_BINARY_DIR} IOS_MIN_SDK_VERSION=${IOS_DEPLOYMENT_TARGET} ${CMAKE_CURRENT_SOURCE_DIR}/ios/build-loop-archs.sh "${ARCHS}")
            set(OSSL_INSTALL "")
        else ()
            set(OSSL_CC "/usr/bin/clang -mmacosx-version-min=${OPENSSL_OSX_DEPLOYMENT_TARGET}")
            set(OSSL_CONFIGURE export CC=${OSSL_CC} && ./Configure darwin64-x86_64-cc ${OSSL_OPTIONS})
            set(OSSL_BUILD make ${MAKE_OPS})
            set(OSSL_INSTALL make install_sw)
        endif ()
    elseif (ANDROID)

        set(OSSL_ANDROID_ARCH ${ANDROID_ABI})

        if(${ANDROID_ABI} MATCHES "arm64")
            set(ANDROID_OSSL_OPTIONS ${OSSL_OPTIONS})
            set(OSSL_ANDROID_ARCH arm64)
        elseif(${ANDROID_ABI} MATCHES "arm")
            string(REPLACE "enable-ec_nistp_64_gcc_128" "" ANDROID_OSSL_OPTIONS "${OSSL_OPTIONS}")
            set(OSSL_ANDROID_ARCH arm)
        elseif(${ANDROID_ABI} MATCHES "x86_64")
            set(ANDROID_OSSL_OPTIONS ${OSSL_OPTIONS})
        elseif(${ANDROID_ABI} MATCHES "x86")
            string(REPLACE "enable-ec_nistp_64_gcc_128" "" ANDROID_OSSL_OPTIONS "${OSSL_OPTIONS}")
        endif()

        set(ANDROID_OSSL_OPTIONS ${ANDROID_OSSL_OPTIONS} -D__ANDROID_API__=${ANDROID_NATIVE_API_LEVEL} android-${OSSL_ANDROID_ARCH})

        set(_ANDROID_TOOLCHAIN "ANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN_ROOT}")
        set(ANDROID_ENV ${_ANDROID_TOOLCHAIN} ${CMAKE_CURRENT_SOURCE_DIR}/android/setenv-android.sh)
        set(OSSL_CONFIGURE ${ANDROID_ENV} ./Configure ${ANDROID_OSSL_OPTIONS})
        set(OSSL_BUILD ${ANDROID_ENV} make)
        set(OSSL_INSTALL ${ANDROID_ENV} make install_sw)
    elseif (WIN32)
        if (NOT MSYS2_BASH_EXE)
            set(MSYS2_BASH_EXE C:/msys64/usr/bin/bash.exe)
        endif ()
            
        if(CMAKE_SIZEOF_VOID_P EQUAL 8)
            if (NOT MSYS2_OPENSSL)
                string(REPLACE "enable-ec_nistp_64_gcc_128" "" WIN32_OSSL_OPTIONS "${OSSL_OPTIONS}")
                set(OSSL_CONFIGURE perl Configure VC-WIN64A ${WIN32_OSSL_OPTIONS})
            else ()
                string(REPLACE "C:/" "/c/" _WIN32_OSSL_OPTIONS "${OSSL_OPTIONS}")
                string(REPLACE "C:/" "/c/" MSYS_SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}")
                string(REPLACE ";" " " WIN32_OSSL_OPTIONS "${_WIN32_OSSL_OPTIONS}")
                set(MSYS_SOURCE_DIR ${MSYS_SOURCE_DIR}/openssl-prefix/src/openssl)
                set(OSSL_CONFIGURE ${MSYS2_BASH_EXE} -lc "cd ${MSYS_SOURCE_DIR} && ${CMAKE_CURRENT_SOURCE_DIR}/mingw64/setenv-mingw64.sh ./configure mingw64 ${WIN32_OSSL_OPTIONS}")
            endif ()
        else()
            string(REPLACE "enable-ec_nistp_64_gcc_128" "" WIN32_OSSL_OPTIONS "${OSSL_OPTIONS}")
            set(OSSL_CONFIGURE perl Configure VC-WIN32 ${WIN32_OSSL_OPTIONS})
        endif()
        
        if (NOT MSYS2_OPENSSL)
            set(OSSL_BUILD nmake)
            set(OSSL_INSTALL nmake install_sw)
        else ()
            set(OSSL_BUILD ${MSYS2_BASH_EXE} -lc "cd ${MSYS_SOURCE_DIR} && ${CMAKE_CURRENT_SOURCE_DIR}/mingw64/setenv-mingw64.sh make ${MAKE_OPS}")
            set(OSSL_INSTALL  ${MSYS2_BASH_EXE} -lc "cd ${MSYS_SOURCE_DIR} && ${CMAKE_CURRENT_SOURCE_DIR}/mingw64/setenv-mingw64.sh make install_sw && mv ${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dll.a ${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.lib && mv ${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dll.a ${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.lib")
        endif ()

    elseif (UNIX)
        set(OSSL_CONFIGURE ./config ${OSSL_OPTIONS})
        set(OSSL_BUILD make ${MAKE_OPS})
        set(OSSL_INSTALL make install_sw)
    endif ()

    ExternalProject_add(
        openssl
        URL ${OSSL_URL}
        URL_HASH SHA256=${OSSL_HASH}
        CONFIGURE_COMMAND ${OSSL_CONFIGURE}
        BUILD_COMMAND ${OSSL_BUILD}
        INSTALL_COMMAND ${OSSL_INSTALL}
        BUILD_IN_SOURCE 1)

    set(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
    set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include" CACHE INTERNAL "")

    if(APPLE)
        if (IOS)
            set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.a" CACHE INTERNAL "")
            set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.a" CACHE INTERNAL "")
        else ()
            set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dylib" CACHE INTERNAL "")
            set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.1.1.dylib" CACHE INTERNAL "")
            set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dylib" CACHE INTERNAL "")
            set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.1.1.dylib" CACHE INTERNAL "")
        endif ()
    elseif(WIN32)
        set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.lib" CACHE INTERNAL "")
        set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.lib" CACHE INTERNAL "")
        if(CMAKE_SIZEOF_VOID_P EQUAL 8)
            set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libcrypto-1_1-x64.dll" CACHE INTERNAL "")
            set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libssl-1_1-x64.dll" CACHE INTERNAL "")
        else()
            set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libcrypto-1_1.dll" CACHE INTERNAL "")
            set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libssl-1_1.dll" CACHE INTERNAL "")
        endif()
    elseif(ANDROID)
        set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.a" CACHE INTERNAL "")
        set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.a" CACHE INTERNAL "")
    elseif(UNIX)
        set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
        set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
        set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so.1.1" CACHE INTERNAL "")
        set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so.1.1" CACHE INTERNAL "")
    endif()

endmacro()

# if the BUILD_OPENSSL flag supplied by the user run the build
if (BUILD_OPENSSL)
    build_openssl()
endif ()

